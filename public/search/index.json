[{"content":"介绍 1 2 3 * EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百兆的Excel。 * github地址: https://github.com/alibaba/easyexcel 读取Excel https://easyexcel.opensource.alibaba.com/\n提供excel 创建并导入坐标 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.18.20\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;easyexcel\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.alibaba\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;fastjson\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.76\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.12\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.slf4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;slf4j-simple\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.7.30\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 创建实体 根据表格的列构建一个对象\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package com.itheima.domain; import com.alibaba.excel.annotation.ExcelProperty; import lombok.Data; import lombok.EqualsAndHashCode; import lombok.Getter; import java.util.Date; @Data public class DemoData { @ExcelProperty(\u0026#34;字符串标题\u0026#34;) private String string; @ExcelProperty(\u0026#34;日期标题\u0026#34;) private Date date; @ExcelProperty(\u0026#34;数字标题\u0026#34;) private Double doubleData; } 创建监听器 创建一个监听器来实现读取数据\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 package com.itheima.listener; import com.alibaba.excel.context.AnalysisContext; import com.alibaba.excel.read.listener.ReadListener; import com.alibaba.excel.util.ListUtils; import com.alibaba.fastjson.JSON; import com.itheima.dao.DemoDAO; import com.itheima.domain.DemoData; import lombok.extern.slf4j.Slf4j; import java.util.List; // 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去 @Slf4j public class DemoDataListener implements ReadListener\u0026lt;DemoData\u0026gt; { /** * 每隔5条存储数据库，实际使用中可以100条，然后清理list ，方便内存回收 */ private static final int BATCH_COUNT = 100; /** * 缓存的数据 */ private List\u0026lt;DemoData\u0026gt; cachedDataList = ListUtils.newArrayListWithExpectedSize(BATCH_COUNT); /** * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。 */ private DemoDAO demoDAO; public DemoDataListener() { // 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数 demoDAO = new DemoDAO(); } /** * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来 * * @param demoDAO */ public DemoDataListener(DemoDAO demoDAO) { this.demoDAO = demoDAO; } /** * 这个每一条数据解析都会来调用 * * @param data one row value. Is is same as {@link AnalysisContext#readRowHolder()} * @param context */ @Override public void invoke(DemoData data, AnalysisContext context) { log.info(\u0026#34;解析到一条数据:{}\u0026#34;, JSON.toJSONString(data)); //读取到一条记录添加到集合 cachedDataList.add(data); // 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM if (cachedDataList.size() \u0026gt;= BATCH_COUNT) { saveData(); // 存储完成清理 list cachedDataList = ListUtils.newArrayListWithExpectedSize(BATCH_COUNT); } } /** * 所有数据解析完成了 都会来调用 * * @param context */ @Override public void doAfterAllAnalysed(AnalysisContext context) { // 这里也要保存数据，确保最后遗留的数据也存储到数据库 saveData(); log.info(\u0026#34;所有数据解析完成！\u0026#34;); } /** * 加上存储数据库 */ private void saveData() { log.info(\u0026#34;{}条数据，开始存储数据库！\u0026#34;, cachedDataList.size()); demoDAO.save(cachedDataList); log.info(\u0026#34;存储数据库成功！\u0026#34;); } } 创建持久层 解析的excel数据需要保存到数据库，就需要创建DemoDAO\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.itheima.dao; import com.itheima.domain.DemoData; import java.util.List; /** 假设这个是你的DAO存储。当然还要这个类让spring管理，当然你不用需要存储，也不需要这个类。 **/ public class DemoDAO { public void save(List\u0026lt;DemoData\u0026gt; list) { // 如果是mybatis,尽量别直接调用多次insert,自己写一个mapper里面新增一个方法batchInsert,所有数据一次性插入 } } 测试文件读取 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package com.itheima.test; import com.alibaba.excel.EasyExcel; import com.alibaba.excel.read.listener.PageReadListener; import com.itheima.domain.DemoData; import com.itheima.listener.DemoDataListener; import lombok.extern.slf4j.Slf4j; import org.junit.Test; @Slf4j public class ReadExcelTest { //方式一: 直接读取 @Test public void test1() { String fileName = \u0026#34;C:\\\\Users\\\\ys\\\\Desktop\\\\huike\\\\excel读取测试.xlsx\u0026#34;; // 这里 需要指定读用哪个class去读，然后读取第一个sheet文件流会自动关闭 EasyExcel.read(fileName, DemoData.class, new PageReadListener\u0026lt;DemoData\u0026gt;(dataList -\u0026gt; { for (DemoData data : dataList) { System.out.println(\u0026#34;读取到一条数据:\u0026#34; + data); } })).sheet().doRead(); } //方式二: 缓冲读取 @Test public void test2() { String fileName = \u0026#34;C:\\\\Users\\\\ys\\\\Desktop\\\\huike\\\\excel读取测试.xlsx\u0026#34;; // 这里 需要指定读用哪个class去读，然后读取第一个sheet文件流会自动关闭 EasyExcel.read(fileName, DemoData.class, new DemoDataListener()).sheet().doRead(); } } 输出Excel 输出的execl 姓名 年龄 创建时间 张三 20 2021-05-05 07:05:55 李四 15 2019-10-05 10:17:42 王五 22 2022-11-15 16:20:23 创建对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package com.itheima.domain; import com.alibaba.excel.annotation.ExcelIgnore; import com.alibaba.excel.annotation.ExcelProperty; import lombok.Data; import java.util.Date; @Data public class User { @ExcelProperty(\u0026#34;姓名\u0026#34;) private String name; @ExcelProperty(\u0026#34;年龄\u0026#34;) private Integer age; @ExcelProperty(\u0026#34;创建时间\u0026#34;) private Date createTime; @ExcelIgnore//忽略这个字段 private String ignore; } 输出测试 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package com.itheima.test; import com.alibaba.excel.EasyExcel; import com.alibaba.excel.ExcelWriter; import com.alibaba.excel.util.ListUtils; import com.alibaba.excel.write.metadata.WriteSheet; import com.itheima.domain.ExcelData; import com.itheima.domain.User; import org.junit.Test; import java.util.Date; import java.util.List; public class WriteExcelTest { private static List\u0026lt;User\u0026gt; list = ListUtils.newArrayList(); //准备输出的数据 static{ for (int i = 0; i \u0026lt; 10; i++) { User data = new User(); data.setName(\u0026#34;字符串\u0026#34; + i); data.setAge(10 + i); data.setCreateTime(new Date()); list.add(data); } } @Test public void test1() { String fileName = \u0026#34;D:/upload/excel输出测试.xlsx\u0026#34;; EasyExcel.write(fileName, User.class).sheet(\u0026#34;模板\u0026#34;).doWrite(list); } @Test public void simpleWrite2() { String fileName = \u0026#34;D:/upload/excel输出测试.xlsx\u0026#34;; // 这里 需要指定写用哪个class去写 ExcelWriter excelWriter = null; try { excelWriter = EasyExcel.write(fileName, ExcelData.class).build(); WriteSheet writeSheet = EasyExcel.writerSheet(\u0026#34;模板\u0026#34;).build(); excelWriter.write(list, writeSheet); } finally { // 千万别忘记finish 会帮忙关闭流 if (excelWriter != null) { excelWriter.finish(); } } } } 常见API https://easyexcel.opensource.alibaba.com/docs/current/api/\n","date":"2023-02-28T17:30:16+08:00","permalink":"https://krsmzzz.github.io/blog/p/%E5%88%9D%E8%AF%86easyexecl/","title":"初识EasyExecl"},{"content":"官网：MINIO官网链接\nhomebrew安装 1 brew install minio/stable/minio 安装完成后 1 brew info minio 启动 1 /usr/local/opt/minio/bin/minio server --config-dir=/usr/local/etc/minio --address=:9000 /usr/local/var/minio config-dir=/usr/local/etc/minio 配置文件目录 address=:9000 使用的端口 /usr/local/var/minio\t存储数据目录\ncmd+c关闭服务器。\n访问 API: http://192.168.31.230:9000 http://127.0.0.1:9000\nConsole: http://192.168.31.230:53563\thttp://127.0.0.1:53563\nRootUser: minioadmin\nRootPass: minioadmin\n","date":"2023-02-26T23:45:47+08:00","permalink":"https://krsmzzz.github.io/blog/p/mac%E5%AE%89%E8%A3%85minio%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"MAC安装MINIO服务器"},{"content":"hello hugo\n","date":"2023-02-22T13:55:34+08:00","permalink":"https://krsmzzz.github.io/blog/p/hello-hugo/","title":"Hello hugo"}]